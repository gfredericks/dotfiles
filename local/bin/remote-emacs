#!/usr/bin/env bash

HOST="$1"
HOSTHEX=`echo $HOSTNAME-$HOST | shasum | cut -c 1-10`
THE_PORT=$(( 1024 + ( 0x$HOSTHEX % 48127 )))
LOG=/dev/null
BROWSER_COMMAND=${2:-firefox}
I3_WORKSPACE=${3:-1}


python3 - $THE_PORT "$BROWSER_COMMAND" "$I3_WORKSPACE" &> $LOG <<EOF &

import base64
import re
import socketserver
import sys
import traceback
from socket import timeout,SHUT_RDWR
from subprocess import call,Popen,PIPE

def log(s):
    print(s, file=sys.stderr)

def _shell_escape(s):
    s2 = ""
    for i in range(len(s)):
        s2 += "\\\\" + s[i]
    return s2

def is_wsl():
    try:
        with open('/proc/version', 'r') as f:
            return 'microsoft' in f.read().lower()
    except FileNotFoundError:
        return False

browser_command=sys.argv[2]
i3_workspace=sys.argv[3]

if is_wsl():
    log("WSL DETECTED")
    def open_url(url):
        log(f"Opening {url!r}")
        url = f"https://me.gfredericks.com/redirect?b64={base64.b64encode(url.encode('UTF-8')).decode('UTF-8')}"
        call(["cmd.exe", "/c", "start", browser_command, url])
else:
    def open_url(url):
        url = _shell_escape(url)
        call(["notify-send","remote open"])
        call(["i3-msg","workspace",i3_workspace])
        call(["i3-msg","exec",browser_command,url])


class MyTCPHandler(socketserver.BaseRequestHandler):
    def handle(self):
        sock = self.request
        sock.settimeout(1)
        s = sock.recv(5)
        try:
            if(s == b'copy '):
                call(["notify-send","remote copy"])
                p = Popen(["/usr/bin/env", "bash", "-c", "base64 -d | copy"],stdin=PIPE)
                last_was_newline=False
                while True:
                    s = sock.recv(4096).decode("UTF-8")
                    if(len(s) == 0):
                        break
                    if(last_was_newline and s[0] == "\n"):
                        break
                    last_was_newline = (s[-1] == "\n")
                    if("\n\n" in s):
                        p.stdin.write(s.split("\n\n")[0].encode("UTF-8"))
                        break
                    else:
                        p.stdin.write(s.encode("UTF-8"))
                p.communicate()
            elif(s == b'paste'):
                call(["notify-send","remote paste"])
                call("paste", stdout=sock.fileno())
            elif(s == b'note '):
                s = s[5:-1] + sock.recv(4096)
                if("\n" in s):
                    title = s.split("\n")[0]
                    call(["notify-send","remote note: {}".format(title)])
                else:
                    sock.sendall(b"ERROR: EXPECTED SINGLE LINE")
            elif(s == b'open '):
                s = s.decode("UTF-8")[5:-1] + sock.recv(4096).decode("UTF-8")
                if("\n" in s):
                    url = s.split("\n")[0]
                    open_url(url)
                else:
                    sock.sendall(b"ERROR: EXPECTED URL+NEWLINE")
            else:
                sock.sendall(b"ERROR: BAD COMMAND")
        except timeout:
            sock.sendall(b"SOCKET TIMEOUT")
        except Exception as e:
            log(f"ERR: {sys.exc_info()}")
            traceback.print_exc(file=sys.stderr)
            sock.sendall("ERR ({})".format(sys.exc_info()).encode("UTF-8"))
        sock.shutdown(SHUT_RDWR)
        sock.close()

if __name__ == "__main__":
    HOST, PORT = "127.0.0.1", int(sys.argv[1])
    socketserver.TCPServer.allow_reuse_address = True
    server = socketserver.TCPServer((HOST, PORT), MyTCPHandler)
    server.serve_forever()
EOF

PYTHON_PID=$!
trap "kill $PYTHON_PID" EXIT

go(){
  ssh \
      -A \
      -R $THE_PORT:127.0.0.1:$THE_PORT \
      -o "ExitOnForwardFailure yes" \
      "$HOST" -t /usr/bin/env bash -l -c $'
    # Kill/cleanup other connections
    PID=`cat ~/.remote-emacs.pid`
    if [ ! -z "$PID" ]; then
      if pstree $PID | grep -q emacsclient; then
        kill $PID > /dev/null
      fi
    fi

    echo '$THE_PORT$' > ~/.remote-emacs-clipboard-browser-port
    echo $$ > ~/.remote-emacs.pid
    export PATH=$(echo ~/bin/* | tr " " :):$PATH
    emacsclient -c -e \'(restore-longrunning-workgroup-setup)\'
    # For some reason, making emacsclient not the last thing causes
    # the server not to crash when we kill the client O_O
    date > /tmp/this-should-not-be-necessary
'
}

STARTED_AT=$SECONDS

go

if (( SECONDS - STARTED_AT < 10 )); then
  if [ $? -eq 255 ] || [ $? -eq 1 ]; then
    echo "Assuming port forwarding failed, doing ssh+kill and trying again..." >&2
    ssh "$HOST" $'sudo netstat -tulpn | grep '$THE_PORT$' | grep -oP \'\d+/\S+\' | cut -f 1 -d / | head -1 | xargs --no-run-if-empty kill'

    go
  fi
fi
