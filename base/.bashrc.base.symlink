NIX_FILE=/etc/profile.d/nix.sh
if [ -f "$NIX_FILE" ]
then
  source $NIX_FILE
fi

SELF=$(readlink -f $BASH_SOURCE)
MYBIN=`dirname $SELF`/bin
export PATH=~/bin:$MYBIN:$PATH
export EDITOR=edit
export BAT_THEME=ansi

declare -A PROMPT_WD_SUBSTITUTIONS
PROMPT_WD_SUBSTITUTIONS[src/main/java]=$'\u001b[34;1m»smj\u001b[0m'
PROMPT_WD_SUBSTITUTIONS[src/test/java]=$'\u001b[34;1m»stj\u001b[0m'
PROMPT_WD_SUBSTITUTIONS[gitignored]=$'\u001b[34;1m»gig\u001b[0m'

alias pyc="ping -c 1 yahoo.com"
alias hey="echo what\'s up"
bc(){
  local F=/dev/shm/.bc.63171c42-7694-4cc2-948b-9b00fc15c54f
  echo "scale=10" > $F
  echo "(I'm setting scale to 10; use scale=\$N to change it)"
  "$(which bc)" -i $F
}

# What does this even do?
export LESS="-R"

# devdir should be defined somewhere else, as a script that takes a
# partial project name and prints the full path to a project that
# is its best guess for that partial name
d(){
  if [ $# -eq 0 ]; then
    echo '`d` is not a thing'
    return 1
  fi
  CDTO="$(devdir "$1")"
  if [[ -z "$CDTO" ]]; then
    return 1
  fi
  cd "$CDTO";
}

-d(){
  ( d "$1"; bash; )
}

# Assemble ssh config from components
cat ~/.ssh/config.* > ~/.ssh/config
chmod 600 ~/.ssh/config

function when-did-that-happen? {
  ___what=$(($SECONDS - $__last_stopped_at))
  ___elapsed=`format-duration seconds $___what`
  echo "That happened $___elapsed ago."
}

HAS_DONE_WALCOM=0

# I believe this is an effective test for when we're creating a
# bash session from org-babel
if [[ -n "${INSIDE_EMACS:-}" ]] && [[ "$TERM" == dumb ]]; then
  HAS_DONE_WALCOM=1
  NO_FANCY_PROMPT=1
fi

. $(dirname $SELF)/fancy-prompt.sh
. $(dirname $SELF)/conveniences.sh

# thanks internet: https://unix.stackexchange.com/a/4220

function make-completion-wrapper () {
  local function_name="$2"
  local arg_count=$(($#-3))
  local comp_function_name="$1"
  shift 2
  local function="
    function $function_name {
      ((COMP_CWORD+=$arg_count))
      COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
      "$comp_function_name"
      return 0
    }"
  eval "$function"
  echo $function_name
  echo "$function"
}

# Use it to define a completion function for your alias, then specify that function as a completer for the alias:

# make-completion-wrapper _apt_get _apt_get_install apt-get install
# complete -F _apt_get_install apt-inst


# actually this doesn't work for some reason? I get
# bash: [: 1: unary operator expected
# make-completion-wrapper _git _git_checkout git checkout
# complete -F _git_checkout gco


# Could have a more meaningful check by having run-checks log to a
# file, and then here we check that the file was recently modified
( crontab -l | grep run-checks >/dev/null ) \
  || echo "ERROR: run-checks missing from crontab"\!

GFREDERICKS_AI_PY_DIR="$(dirname "$SELF")"/ai
ai(){
  prompt=("$@")
  (
    "$GFREDERICKS_AI_PY_DIR"/go.sh chat "${prompt[@]}"
  )
}
aiimg(){
  prompt=("$@")
  (
    "$GFREDERICKS_AI_PY_DIR"/go.sh img "${prompt[@]}"
  )
}
