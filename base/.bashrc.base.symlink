NIX_FILE=/etc/profile.d/nix.sh
if [ -f "$NIX_FILE" ]
then
  source $NIX_FILE
fi

SELF=$(readlink -f $BASH_SOURCE)
MYBIN=`dirname $SELF`/bin
export PATH=~/bin:$MYBIN:$PATH
export EDITOR=edit
export BAT_THEME=ansi-dark

declare -A PROMPT_WD_SUBSTITUTIONS
PROMPT_WD_SUBSTITUTIONS[src/main/java]=$'\u001b[34;1m»smj\u001b[0m'
PROMPT_WD_SUBSTITUTIONS[src/test/java]=$'\u001b[34;1m»stj\u001b[0m'
PROMPT_WD_SUBSTITUTIONS[gitignored]=$'\u001b[34;1m»gig\u001b[0m'

cdl(){ cd $1; ls; }
cdll(){ cd $1; ls -l; }
cdlla(){ cd $1; ls -la; }
alias lsl="ls -l"
alias lsa="ls -a"
alias lsla="ls -la"
alias lslh="ls -lh"
alias wcl="wc -l"
alias rgrep="grep -r"
alias today="date +%Y-%m-%d"
alias jqu="jq --unbuffered"
alias jqr="jq -r"
alias k91="kill -9 %1"
alias pyc="ping -c 1 yahoo.com"
alias p3="python3"
alias emc="emacsclient"
alias pd="pushd"
alias dp="popd"
bc(){
  local F=/dev/shm/.bc.63171c42-7694-4cc2-948b-9b00fc15c54f
  echo "scale=10" > $F
  echo "(I'm setting scale to 10; use scale=\$N to change it)"
  "$(which bc)" -i $F
}
_find_root_of_git_dir(){
  (
    while [[ (! -e .git) && "$PWD" != / ]]; do
        cd ..
    done

    if [[ "$PWD" != / ]]; then
        echo "$PWD"
    fi
  )
}
gcd(){
  ROOT_OF_GIT_DIR="$(_find_root_of_git_dir)"
  if [[ -n "$ROOT_OF_GIT_DIR" ]]; then
    cd "$ROOT_OF_GIT_DIR"
  else
    echo "Not in a git repo"\!
    return 1
  fi
}

# git shortcuts
alias gs="git status"
alias gl="git lg"
alias gc="git commit"
alias ga="git add"
alias gco="git checkout"
alias gd="git diff"
alias gr="git reset"
alias grh="git reset HEAD"
alias gpp="git pull && git push"
alias gpddraagp="git pull --rebase && git push"

# Navigation
function ..(){ for ((j=${1:-1},i=0;i<j;i++));do builtin cd ..;done;}
alias ...='.. 2'
alias ....='.. 3'
alias .....='.. 4'
alias ......='.. 5'
alias .......='.. 6'
alias cd-="cd -"

# What does this even do?
export LESS="-R"

# https://twitter.com/petdance/status/964576338307936257
alias hed='head -n $(( $(tput lines) - 3 ))'
alias tal='tail -n $(( $(tput lines) - 3 ))'

mkcd(){ mkdir -p "$1"; cd "$1"; }
tmp(){ pushd `mktemp -d --tmpdir=/dev/shm`; }

# devdir should be defined somewhere else, as a script that takes a
# partial project name and prints the full path to a project that
# is its best guess for that partial name
d(){
  if [ $# -eq 0 ]; then
    echo '`d` is not a thing'
    return 1
  fi
  CDTO="$(devdir "$1")"
  if [[ -z "$CDTO" ]]; then
    return 1
  fi
  cd "$CDTO";
}

-d(){
  ( d "$1"; bash; )
}

-cd(){
  ( cd "$1"; bash; )
}



# Assemble ssh config from components
cat ~/.ssh/config.* > ~/.ssh/config
chmod 600 ~/.ssh/config

# Showing the runtime of the last command; adapted from
# http://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/

IN_PROMPT=1

function timer_start {
    if [ $IN_PROMPT -eq "1" ]; then
        timer=${timer:-$SECONDS}
    fi
}

function timer_stop {
    the_seconds=$(($SECONDS - $timer))

    __last_stopped_at=$SECONDS

    # Hide results for <2sec to reduce noise
    if [[ $the_seconds > 1 ]]; then
        timer_show="`format-duration seconds $the_seconds`"
    else
        timer_show=""
    fi

    unset timer

}

function when-did-that-happen? {
  ___what=$(($SECONDS - $__last_stopped_at))
  ___elapsed=`format-duration seconds $___what`
  echo "That happened $___elapsed ago."
}

# Prompt
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

delete_ansi_codes() {
    echo "$1" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"
}

HAS_DONE_WALCOM=0

# I believe this is an effective test for when we're creating a
# bash session from org-babel
if [[ -n "${INSIDE_EMACS:-}" ]] && [[ "$TERM" == dumb ]]; then
  HAS_DONE_WALCOM=1
  NO_FANCY_PROMPT=1
fi

if [ "$NO_FANCY_PROMPT" == "1" ]; then
  PS1="$ "
  PROMPT_COMMAND=
else
  trap 'timer_start' DEBUG
  PROMPT_COMMAND=__prompt_command
fi

__prompt_command() {
    local EXIT="$?"
    IN_PROMPT=0
    timer_stop
    if [[ -n "$EXTRA_PROMPT_COMMAND" ]]; then
        eval "$EXTRA_PROMPT_COMMAND"
    fi
    PS1=""

    local RCol='\[\e[0m\]'

    local Yellow='\[\e[0;33m\]'
    local Orange='\[\e[01;31m\]'
    local Red='\[\e[0;31m\]'
    local Gre='\[\e[0;32m\]'
    local Grey='\[\e[01;32m\]'
    local BYel='\[\e[1;33m\]'
    local BBlu='\[\e[1;34m\]'
    local LightGrey='\[\e[01;34m\]'
    local Pur='\[\e[0;35m\]'
    local Theme=$Yellow
    local CIRCLE="$Theme●$RCol"
    local INPUT_COLOR=$'\[\e[0;36m\]'

    declare -A PROMPT_COMPONENTS

    if [[ -n "${PROMPT_LABEL:-}" ]]; then
        PROMPT_COMPONENTS["0-0label"]=$'\u001b[34;1m'"$PROMPT_LABEL"$'\u001b[0m'
    fi

    GIT_BRANCH=$(parse_git_branch)
    if [[ "$GIT_BRANCH" ]]; then
        local V
        if [[ "$GIT_BRANCH" == "master" ]]; then
            V=$'\u001b[34;1mgit\u001b[0m'
        else
            V=$'\u001b[34;1mgit:\u001b[0m'"$GIT_BRANCH"
        fi
        PROMPT_COMPONENTS["3-git-branch"]="$V"
    fi

    local JOBS=`jobs -p | wc -l`
    if [ $JOBS -gt "0" ]; then
        if [ $JOBS -eq "1" ]; then
            PROMPT_COMPONENTS["2-jobs"]="1 job"
        else
            PROMPT_COMPONENTS["2-jobs"]="$JOBS jobs"
        fi
    fi

    if [ $EXIT -gt "0" ]; then
        PROMPT_COMPONENTS["4-exit"]="${Red}$EXIT${RCol}"
    fi

    THE_TIMER=${timer_show}
    if [[ "$THE_TIMER" ]]; then
        PROMPT_COMPONENTS["5-timer"]="$THE_TIMER"
    fi

    local H;
    if [ ! -z "$BASH_PROMPT_HOSTNAME" ]; then
      H="$BASH_PROMPT_HOSTNAME"
    else
      H="$HOSTNAME"
    fi
    PROMPT_COMPONENTS["0-hostname"]="$H"
    THEWD="$PWD"
    [[ "$THEWD" =~ ^"$HOME"(/|$) ]] && THEWD="~${THEWD#$HOME}"
    local v
    for k in "${!PROMPT_WD_SUBSTITUTIONS[@]}"; do
        v="${PROMPT_WD_SUBSTITUTIONS["$k"]}"
        THEWD="${THEWD/$k/$v}"
    done
    DIRSLEN=${#DIRSTACK[@]}
    if [[ $DIRSLEN -gt 1 ]]; then
        DIRS_PREFIX=$'\u001b[1;32m'"[$DIRSLEN] "$'\u001b[0m'
    else
        DIRS_PREFIX=""
    fi
    PROMPT_COMPONENTS["1-pwd"]="$DIRS_PREFIX$THEWD"

    for k in "${!EXTRA_PROMPT_COMPONENTS[@]}"; do
        v="${EXTRA_PROMPT_COMPONENTS[$k]}"
        PROMPT_COMPONENTS["$k"]="$v"
    done

    local EXTRA_PROMPT_COMPONENTS_DIR="$HOME/tmp/.prompt-components"
    if [[ -d $EXTRA_PROMPT_COMPONENTS_DIR ]]; then
        {
            local X=0
            while read line; do
                X=$((X+=1))
                if [[ $X -gt 5 ]]; then
                  PROMPT_COMPONENTS["8-err-too-many"]="${Red}Too many lines in ~/tmp/.prompt-components${RCol}"
                  break
                fi
                PROMPT_COMPONENTS["9-extra-$line-$RANDOM$RANDOM"]="$line"
            done < <(find "$EXTRA_PROMPT_COMPONENTS_DIR" -type f -print0 | xargs -0 cat)
        } &> /dev/null
    fi

    unset EXTRA_PROMPT_COMPONENTS
    declare -A EXTRA_PROMPT_COMPONENTS

    local MAIN_LINE="$Theme◀$RCol"
    local KEYS=()
    while read line; do
        KEYS+=("$line")
    done <<< "$(for k in "${!PROMPT_COMPONENTS[@]}"; do echo "$k"; done | sort)"

    local PROMPT_LINES=()

    local FIRST=1
    local LINE_LEN=1
    for k in "${KEYS[@]}"; do
        if [ $FIRST -eq "0" ]; then
            MAIN_LINE="$MAIN_LINE $CIRCLE"
        else
            FIRST=0
        fi
        COMP="${PROMPT_COMPONENTS["$k"]}"
        # counting the line length manually because the color codes
        # make the length of the string and the actual display length
        # different; the color codes seem escaped at this point, which
        # is surprising
        COMP_NO_COLORS="$(delete_ansi_codes "$COMP")"
        LINE_LEN=$(( $LINE_LEN + 3 + ${#COMP_NO_COLORS} ))
        MAIN_LINE="$MAIN_LINE $COMP"
    done
    MAIN_LINE="$MAIN_LINE $Theme▶ $RCol"

    if [[ $LINE_LEN -gt $COLUMNS ]]; then
        for k in "${KEYS[@]}"; do
            COMP="${PROMPT_COMPONENTS["$k"]}"
            PROMPT_LINES+=("$Theme◀$RCol $COMP")
        done
    else
        PROMPT_LINES+=("$MAIN_LINE")
    fi

    # I believe bash is designed to let you have a separate
    # font for the input text, but emacs' term-mode has
    # some disturbing bug when doing this, so I don't by
    # default :/
    if [[ -n "${COLORIZED_BASH_INPUT:-}" ]]; then
      PROMPT_LINES+=("${Theme}\$${RCol} $INPUT_COLOR")
    else
      PROMPT_LINES+=("${Theme}\$${RCol} ")
    fi

    local WALCOM=""
    if [[ "$HAS_DONE_WALCOM" == "0" ]]; then
      if [[ $SHLVL == 1 ]]; then
        HAS_DONE_WALCOM=1
        WALCOM="\n${Theme}▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰\n▰                      ▰\n▰  WALCOM!!1 TO BASH!  ▰\n▰                      ▰\n▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰▰\n$RCol"
      fi
    fi

    local PREFIX=""
    if [[ "$SHLVL" -gt 1 ]]; then
      local X="$SHLVL"
      PREFIX="${Theme}"
      while [[ "$X" -gt 1 ]]; do
        PREFIX+="┃"
        X=$((X - 1))
      done
      PREFIX+="$RCol "
    fi

    WITH_NEWLINES="$(printf $'\n'"$PREFIX"'%s' "${PROMPT_LINES[@]}")"
    PS1+="$WALCOM$WITH_NEWLINES"
    if [[ -n "${COLORIZED_BASH_INPUT:-}" ]]; then
      PS0="$RCol"
      PS2="${Theme}> $INPUT_COLOR"
    fi

    # So we can tell how long since the last command finished
    SECONDS=0

    IN_PROMPT=1
}


# thanks internet: https://unix.stackexchange.com/a/4220

function make-completion-wrapper () {
  local function_name="$2"
  local arg_count=$(($#-3))
  local comp_function_name="$1"
  shift 2
  local function="
    function $function_name {
      ((COMP_CWORD+=$arg_count))
      COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
      "$comp_function_name"
      return 0
    }"
  eval "$function"
  echo $function_name
  echo "$function"
}

# Use it to define a completion function for your alias, then specify that function as a completer for the alias:

# make-completion-wrapper _apt_get _apt_get_install apt-get install
# complete -F _apt_get_install apt-inst


# actually this doesn't work for some reason? I get
# bash: [: 1: unary operator expected
# make-completion-wrapper _git _git_checkout git checkout
# complete -F _git_checkout gco
