#!/usr/bin/env ruby

# Reads decreasing positive integers from stdin and prints estimates
# about when it will reach zero. Exits on zero.

DECAY=0.9
if ARGV.length == 1
  $target = ARGV[0].to_i
else
  $target = nil
end

def update_rate(old_rate, new_rate)
  if old_rate == nil
    new_rate
  else
    DECAY * old_rate + (1 - DECAY) * new_rate
  end
end

def duration_s secs
  if secs < 60
    "#{secs} seconds"
  elsif secs < 3600
    "#{secs / 60} minutes, #{duration_s(secs % 60)}"
  else
    "#{secs / 3600} hours, #{duration_s(secs % 3600)}"
  end
end

def read_num
  x = STDIN.gets.to_i
  if $target != nil
    x = $target - x
  end
  return x
end

last_num = read_num
last_t = Time.new.to_i
rate = nil

while last_num > 0
  next_num = read_num
  next_t = Time.new.to_i
  delta = next_num - last_num
  delta_t = last_t - next_t
  per_sec = delta.to_f / delta_t
  rate = update_rate(rate, per_sec)
  remaining, eta =
    if rate == 0
      ["an eternity", "heat death"]
    else
      est_secs_left = (next_num / rate).to_i
      eta = (Time.new + est_secs_left)
      [duration_s(est_secs_left), eta.to_s]
    end
  puts "%10d | %40s | %s" % [next_num, remaining, eta]
  last_num = next_num
  last_t = next_t
end

puts "DONE!"
