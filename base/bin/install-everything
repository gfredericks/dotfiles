#!/usr/bin/env bash

# script for building everything I can't easily get via a package
# manager (either at all, or at least a recent-enough version
# of). essentially it's an ad-hoc, informally-specified, bug-ridden,
# slow implementation of half of nix.

# everything should be installed in userland, in ~/.install-everything with symlinks
# from ~/bin.

set -Ceou pipefail

if [ $# -eq 0 ]
then
    echo "USAGE: install-everything [all | <thing>]" 1>&2
    exit 1
fi

sudo apt-get update
sudo apt-get install -y wget build-essential unzip

# wtf; using bsdtar instead of tar in this script because
# of https://github.com/coreos/bugs/issues/1095
# sudo apt-get install -y --no-install-recommends bsdtar
bsdtar(){
  tar "$@"
}

# sudo apt-get install -y wget build-essential asciidoc docbook2x libssl-dev \
#      libcurl4-openssl-dev libexpat1-dev gettext &&
# sudo apt-get install tree

BUILDDIRBASE=~/.install-everything
mkdir -p ~/bin

while [ $# -ne 0 ]
do

  ###
  ### Misc
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "misc" ]
  then
      # - better to put latex stuff in one place or something?
      # - moreutils is for sponge
      # - net-tools has netstat, used by remote-emacs
      sudo apt-get install -y tree htop texlive-latex-extra \
           python3-pygments xclip rlwrap xautolock moreutils \
           lilypond entr flameshot net-tools zstd sshfs ncal \
           inotify-tools jq
  fi

  ###
  ### Emacs
  ###

  # not including "server" here since I only install emacs on special
  # servers
  if [ "$1" == "all" -o "$1" == "emacs" ]
  then
    sudo apt-get install -y libncurses-dev asciidoc docbook2x libgnutls28-dev autoconf libjansson-dev
    # weird: https://emacs.stackexchange.com/questions/41778/emacs-26-1-configure-script-doesnt-like-the-gnutls-version-on-a-redhat-sytem
    sudo apt-get install -y pkg-config
    BUILDDIR=$BUILDDIRBASE/emacs
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    # shallow because the emacs repo is super big/old
    git clone --shallow-since=2024-01-01 git://git.sv.gnu.org/emacs.git $BUILDDIR/git-repo
    cd $BUILDDIR/git-repo
    # tag emacs-29.4
    git checkout 6a299b3caceb2c73b932ba73849738faa8c5d975
    ./autogen.sh
    ./configure \
        --without-x \
        --with-json \
        --prefix=$BUILDDIR/install \
        --bindir=$BUILDDIR/bin
    make
    make install
    make clean
    rm -f ~/bin/emacs.bin
    ln -s $BUILDDIR/bin ~/bin/emacs.bin
  fi

  ###
  ### Git
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "git" ]
  then
    sudo apt-get install -y dh-autoreconf libcurl4-gnutls-dev libexpat1-dev \
         gettext libz-dev libssl-dev libpcre2-dev
    sudo apt-get install -y asciidoc xmlto docbook2x
    sudo apt-get install -y install-info
    BUILDDIR=$BUILDDIRBASE/git
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    VERSION=2.45.1
    wget https://github.com/git/git/archive/v$VERSION.zip
    echo "c001792fac56e74834d60285b07ad010af2802256d76f8f6c6e952a2afe6d10e  v$VERSION.zip" | sha256sum -c
    unzip v$VERSION.zip
    cd git-$VERSION
    INSTALLDIR=$BUILDDIR/install
    make configure
    ./configure --with-libpcre --prefix=$INSTALLDIR
    mkdir $INSTALLDIR
    # I had to comment out doc and install-doc from the next two
    # things because of a weird bad-xml error that doesn't seem to be
    # easily fixable; cursory googling only finds people brew
    # installing things on their macs
    make prefix=$INSTALLDIR all info # doc
    # skipping `install-html` because who even uses that
    make prefix=$INSTALLDIR install install-info # install-doc
    cd -
    rm -f ~/bin/git.bin
    ln -s $INSTALLDIR/bin ~/bin/git.bin
  fi

  ###
  ### NodeJS
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "nodejs" ]
  then
    BUILDDIR=$BUILDDIRBASE/nodejs
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    VERSION=23.7.0
    wget https://nodejs.org/dist/v${VERSION}/node-v${VERSION}-linux-x64.tar.xz
    echo "4d9482dc62f9b82279055637f2a92c7e8297d78be8d68e110ac3aae2e56d0ebc  node-v$VERSION-linux-x64.tar.xz" | \
        sha256sum -c
    bsdtar xJf node-v${VERSION}-linux-x64.tar.xz
    rm -f ~/bin/nodejs.bin
    ln -s $BUILDDIR/node-v${VERSION}-linux-x64/bin ~/bin/nodejs.bin
    ~/bin/nodejs.bin/npm install -g katex @mermaid-js/mermaid-cli
  fi

  ###
  ### PhantomJS
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "phantomjs" ]
  then
    BUILDDIR=$BUILDDIRBASE/phantomjs
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2
    echo '86dd9a4bf4aee45f1a84c9f61cf1947c1d6dce9b9e8d2a907105da7852460d2f  ./phantomjs-2.1.1-linux-x86_64.tar.bz2' | \
        sha256sum -c
    bsdtar xf phantomjs-2.1.1-linux-x86_64.tar.bz2
    rm -f ~/bin/phantomjs
    ln -s $BUILDDIR/phantomjs-2.1.1-linux-x86_64/bin/phantomjs ~/bin/phantomjs
  fi

  ###
  ### Python 3
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "python3" ]
  then
      sudo apt-get install -y \
           libffi-dev libreadline-dev libsqlite3-dev libbz2-dev liblzma-dev \
           libjpeg-dev zlib1g-dev libssl-dev libncurses5-dev libtk8.6 \
           libgdm-dev libpcap-dev
      # I think this is only used for WSL, not available in ubuntu 24.04
      sudo apt-get install -y libdb4o-cil-dev || true

    BUILDDIR=$BUILDDIRBASE/python3
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    VERSION=3.13.1
    wget https://www.python.org/ftp/python/$VERSION/Python-$VERSION.tgz
    echo "1513925a9f255ef0793dbf2f78bb4533c9f184bdd0ad19763fd7f47a400a7c55  Python-$VERSION.tgz" | \
        sha256sum -c
    tar xzf Python-$VERSION.tgz
    cd Python-$VERSION
    INSTALLDIR=$BUILDDIR/install/python-$VERSION
    ./configure --prefix=$INSTALLDIR && make && make install
    rm -f ~/bin/python3.bin
    ln -s $INSTALLDIR/bin ~/bin/python3.bin
    pip3 install notebook numpy scipy pandas matplotlib requests
  fi

  ###
  ### Java
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "java" ]
  then
      # JDKs seem hard to get in an automated fashion, so I just
      # assume that appropriate tarballs have already been acquired
      install_java(){
          version="$1"
          tarball_path="$2"
          sha256="$3"

          BUILDDIR=$BUILDDIRBASE/tmp
          rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
          if [[ ! -f "$tarball_path" ]]; then
              >&2 echo "Can't find expected tarball $tarball_path"
              exit 1
          fi
          echo "$sha256  $tarball_path" | sha256sum -c >/dev/null
          bsdtar xzf $tarball_path
          TARBALL="$(ls)"
          cd ..
          rm -rf $TARBALL
          mv tmp/$TARBALL .
          SYMLINK=jdk-$version
          rm -f $SYMLINK && ln -s $TARBALL $SYMLINK
          echo $PWD/$SYMLINK/bin
      }
      install_java \
          8 \
          ~/.install-everything/jdk-tarballs/jdk-8u191-linux-x64.tar.gz \
          53c29507e2405a7ffdbba627e6d64856089b094867479edc5ede4105c1da0d65
      JAVA_11_BIN="$(install_java \
                         11 \
                         ~/.install-everything/jdk-tarballs/jdk-11.0.1_linux-x64_bin.tar.gz \
                         e7fd856bacad04b6dbf3606094b6a81fa9930d6dbb044bbd787be7ea93abc885)"
      JAVA_12_BIN="$(install_java \
                         12 \
                         ~/.install-everything/jdk-tarballs/jdk-12.0.1_linux-x64_bin.tar.gz \
                         9fd6dcdaf2cfca7da59e39b009a0f5bcd53bec2fb16105f7ca8d689cdab68d75)"
      JAVA_17_BIN="$(install_java \
                         17 \
                         ~/.install-everything/jdk-tarballs/openjdk-17.0.2_linux-x64_bin.tar.gz \
                         0022753d0cceecacdd3a795dd4cea2bd7ffdf9dc06e22ffd1be98411742fbb44)"
      JAVA_21_BIN="$(install_java \
                         21 \
                         ~/.install-everything/jdk-tarballs/openjdk-21.0.2_linux-x64_bin.tar.gz \
                         a2def047a73941e01a73739f92755f86b895811afb1f91243db214cff5bdac3f)"
      JAVA_23_BIN="$(install_java \
                         21 \
                         ~/.install-everything/jdk-tarballs/openjdk-23.0.1_linux-x64_bin.tar.gz \
                         dc9b6adc1550afd95e30e131c1c38044925cb656923f92f6dbf0fbd8c1405629)"

      rm -f ~/bin/jdk.bin
      ln -s $JAVA_23_BIN ~/bin/jdk.bin
  fi

  ###
  ### Maven 3
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "maven" ]
  then
    BUILDDIR=$BUILDDIRBASE/maven
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    VERSION=3.6.3
    wget https://archive.apache.org/dist/maven/maven-3/$VERSION/binaries/apache-maven-$VERSION-bin.tar.gz
    echo "26ad91d751b3a9a53087aefa743f4e16a17741d3915b219cf74112bf87a438c5  apache-maven-$VERSION-bin.tar.gz" | \
        sha256sum -c
    bsdtar xzf apache-maven-$VERSION-bin.tar.gz
    rm -f ~/bin/mvn
    ln -s $BUILDDIR/apache-maven-$VERSION/bin/mvn ~/bin/mvn
  fi

  ###
  ### Gradle
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "gradle" ]
  then
    BUILDDIR=$BUILDDIRBASE/gradle
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    VERSION=8.11.1
    wget https://services.gradle.org/distributions/gradle-$VERSION-bin.zip
    SHA256=f397b287023acdba1e9f6fc5ea72d22dd63669d59ed4a289a29b1a76eee151c6
    echo "$SHA256  gradle-$VERSION-bin.zip" | sha256sum -c
    unzip gradle-$VERSION-bin.zip
    rm -f ~/bin/gradle
    ln -s $BUILDDIR/gradle-$VERSION/bin/gradle ~/bin/gradle
  fi

  ###
  ### Clojure
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "clojure" ]
  then
    sudo apt-get install leiningen
    BUILDDIR=$BUILDDIRBASE/clojure
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    VERSION=1.12.0.1501
    SCRIPT=linux-install-$VERSION.sh
    wget https://download.clojure.org/install/$SCRIPT
    echo "65257085958376a3c89755a6108d67163882c75af709fe8c8918222ca5730aef  $SCRIPT" | \
        sha256sum -c
    chmod +x $SCRIPT
    ./$SCRIPT -p $BUILDDIR
    cd -
    BIN=$BUILDDIR/bin
    rm -f ~/bin/clojure.bin
    ln -s $BIN ~/bin/clojure.bin
  fi

  ###
  ### dynamic-colors
  ###

  if [ "$1" == "all" -o "$1" == "dynamic-colors" ]
  then
    BUILDDIR=$BUILDDIRBASE/dynamic-colors
    rm -rf $BUILDDIR
    git clone git@github.com:gfredericks/dynamic-colors.git $BUILDDIR
    cd $BUILDDIR
    git checkout 876a6798c2860f37363d9023de16c7e6b7b995fd
    BIN=$BUILDDIR/bin
    rm -f ~/bin/dynamic-colors.bin
    ln -s $BIN ~/bin/dynamic-colors.bin
    rm -f ~/.dynamic-colors
    ln -s $BUILDDIR ~/.dynamic-colors
  fi

  ###
  ### bat
  ###

  if [ "$1" == "all" -o "$1" == "bat" ]
  then
    sudo apt-get install -y cargo
    BUILDDIR=$BUILDDIRBASE/bat
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    REPODIR=$BUILDDIR/repo
    INSTALLDIR=$BUILDDIR/install
    mkdir $INSTALLDIR
    git clone --depth=1 -b v0.25.0 --recursive git@github.com:sharkdp/bat.git $REPODIR
    cd $REPODIR
    [ "$(git rev-parse HEAD)" == "25f4f96ea3afb6fe44552f3b38ed8b1540ffa1b3" ]
    cargo install --root $INSTALLDIR --locked bat
    rm -rf $REPODIR
    ln -s $INSTALLDIR/bin/bat ~/bin/bat
  fi

  ###
  ### i3lock-color
  ###

  if [ "$1" == "all" -o "$1" == "i3lock-color" ]
  then
    sudo apt install autoconf gcc make pkg-config libpam0g-dev libcairo2-dev \
         libfontconfig1-dev libxcb-composite0-dev libev-dev libx11-xcb-dev \
         libxcb-xkb-dev libxcb-xinerama0-dev libxcb-randr0-dev libxcb-image0-dev \
         libxcb-util-dev libxcb-xrm-dev libxkbcommon-dev libxkbcommon-x11-dev \
         libjpeg-dev
    BUILDDIR=$BUILDDIRBASE/i3lock-color
    rm -rf $BUILDDIR && mkdir -p $BUILDDIR && cd $BUILDDIR
    REPODIR=$BUILDDIR/repo
    git clone git@github.com:Raymo111/i3lock-color.git "$REPODIR"
    cd "$REPODIR"
    git checkout 380a10a90f0dee57f40105a0ac097ba52e8278da
    ./build.sh
    ln -s $REPODIR/build/i3lock ~/bin/i3lock-color
  fi

  ###
  ### fzf
  ###

  if [ "$1" == "all" -o "$1" == "server" -o "$1" == "fzf" ]
  then
      sudo apt install fzf

      FZF_KEYBINDINGS_FILE=/usr/share/doc/fzf/examples/key-bindings.bash
      FZF_HASH="$(md5sum "$FZF_KEYBINDINGS_FILE" | awk '{print $1}')"
      FZF_MODIFIED_FILE="$(dirname "$SELF")"/fzf-key-bindings/$FZF_HASH.bash
      if ! [[ -f "$FZF_MODIFIED_FILE" ]]; then
          # Modifying the keybindings file is just a matter of
          # finding the `bind -m emacs-standard` lines that define `\C-t`,
          # and prefixing that bit with `\e`
          echo >&2 "Error: $FZF_MODIFIED_FILE does not exist"
          exit 7
      fi
  fi


  ###
  ### extra stuff!
  ###

  if [ "$1" == "all" -o "$1" == "extras" ]
  then
    sudo apt-get install -y imagemagick graphviz curl \
         texlive{,-base,-latex-recommended,-latex-extra,-full} \
         bsdgames inkscape xterm xdotool sshfs inotify-tools \
         autorandr
  fi

  shift
done

echo  $'\n\n---------------------\nInstalled successfully!'
