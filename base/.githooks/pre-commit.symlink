#!/usr/bin/env bash

set -Eeou pipefail

if [[ -n "${SKIP_NO_COMMIT_CHECK:-}" ]]; then
    echo >&2 "Skipping NO""COMMIT check"
    exit 0
fi

NO_COMMIT_IS_RUNNING=$(mktemp)

(
    sleep 3
    if [[ -f "$NO_COMMIT_IS_RUNNING" ]]; then
        echo "(to skip the NO ""COMMIT check, set SKIP_NO_COMMIT_CHECK=1)"
        rm -f "$NO_COMMIT_IS_RUNNING"
    fi
) &

NO_COMMIT_START=$(date +%s%3N)

# specifically excludes --no-commit since that is a flag to git-merge
# that could easily show up in code
GREP_PATTERN="(?i)\bno[-_ ]?commit\b(?<!--no-commit)"

TOTAL_MATCHES=0
while read LINE; do
    TOTAL_MATCHES=$((TOTAL_MATCHES + 1))
    echo -e "\u001b[34;1m$LINE\u001b[0m";
done < <(
    # I don't like having to couple here to the implementation
    # detail that git-cached-grep-staged is a python script, but
    # setting this does make it consistently faster, and I don't
    # know a clean way of making git-cached-grep-staged handle
    # that detail
    PYTHONNOUSERSITE=1 \
    git-cached-grep-staged "$GREP_PATTERN"
)

rm "$NO_COMMIT_IS_RUNNING"

NO_COMMIT_DURATION=$(($(date +%s%3N) - $NO_COMMIT_START))

if [[ $NO_COMMIT_DURATION -gt 250 ]]; then
    printf >&2 $'\u001b'"[31m(grepping for NO"" COMMIT took %.3fs)"$'\u001b'"[0m\n" $(python -c "print($NO_COMMIT_DURATION / 1000.0)")
fi

if [[ $TOTAL_MATCHES -gt 0 ]]; then
    echo -e >&2 "\u001b[31;1mTHAT COMMIT HAS \"NO ""COMMIT\" IN IT,\nWHAT KIND OF MONSTER ARE YOU!!??1!\u001b[0m"
fi

HOOKSDIR="$(dirname "$0")"

for file in "$HOOKSDIR"/pre-commit.*; do
    # need this extra check for when nothing matches; I'm not sure of
    # a cleaner way to avoid it
    if [[ -e "$file" ]]; then
        if [[ -x "$file" ]]; then
            "$file"
        else
            echo >&2 "Can't run $file because it is not executable"
            exit 9
        fi
    fi
done
