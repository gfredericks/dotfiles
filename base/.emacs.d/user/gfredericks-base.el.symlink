(provide 'gfredericks-base)

(require 'gfredericks-packages)

(setq gfredericks-base-packages
  '(markdown-mode
    multiple-cursors
    projectile
    ;; idle-highlight-mode  -- why can't I install this???
    neotree
    htmlize ;; used for org-mode exports
    magit
    git-timemachine
    paredit
    real-auto-save
    smex
    window-numbering
    workgroups
    num3-mode
    rust-mode
    yaml-mode
    dash))

(dolist (package-name gfredericks-base-packages)
  (gfredericks-packages-install package-name))

(require 'markdown-mode)
(require 'real-auto-save)
(require 'num3-mode)

(window-numbering-mode)

;; modes by file extension
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.el.symlink\\'" . emacs-lisp-mode))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (paredit-mode +1)))

(menu-bar-mode -99)
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)

;; idle-highlight
;; it highlights usages of the symbol under point
;; (add-hook 'prog-mode-hook 'idle-highlight-mode)

;; projectile
(require 'projectile)
(add-hook 'prog-mode-hook 'projectile-mode)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(setq projectile-project-root-files-functions
      ;; reordering these so that top-down comes before bottom-up, to
      ;; support git repos with multiple leiningen projects in them,
      ;; as well as git-worktree things
      '(projectile-root-local projectile-root-top-down projectile-root-bottom-up projectile-root-top-down-recurring))
;; see
;; - https://github.com/bbatsov/projectile/pull/566
;; - https://github.com/bbatsov/projectile/issues/1387
;; - https://github.com/bbatsov/projectile/issues/1404
(defun do-not-use-file-truename-in-projectile-project-root
    (old-fn &rest args)
  (flet ((file-truename (d) d))
    (apply old-fn args)))
(advice-add 'projectile-project-root :around 'do-not-use-file-truename-in-projectile-project-root)

;; neotree
(require 'neotree) ;; is this necessary?
(setq projectile-switch-project-action 'neotree-projectile-action)

(defun neotree-project-dir ()
  "Open NeoTree using the git root."
  (interactive)
  (let ((project-dir (projectile-project-root))
        (file-name (buffer-file-name)))
    (neotree-toggle)
    (if project-dir
        (if (neo-global--window-exists-p)
            (progn
              (neotree-dir project-dir)
              (neotree-find file-name)))
      (message "Could not find git project root."))))
(global-set-key (kbd "C-c C-t") 'neotree-toggle)

(add-hook 'find-file-hook '
          (lambda ()
            (display-line-numbers-mode)
            (make-local-variable 'scroll-margin)
            (setq scroll-margin 3)))

(add-hook 'before-save-hook 'delete-trailing-whitespace)


(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(setq ido-max-directory-size 1000000)

(require 'smex)
(global-set-key (kbd "M-x") 'smex)

;; Windows
(winner-mode 1)
(setq wg-prefix-key (kbd "C-c C-g"))
(require 'workgroups)
(workgroups-mode 1)
(setq wg-morph-on nil)
(setq wg-use-faces nil)
(define-key wg-map (kbd "TAB") 'wg-switch-to-previous-workgroup)

(require 'magit)
(setq magit-last-seen-setup-instructions "1.4.0")

;; multiple-cursors
(global-set-key (kbd "C-c m e") 'mc/edit-lines)
(global-set-key (kbd "C-c m a") 'mc/mark-all-like-this)
(global-set-key (kbd "C-c m n") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c m p") 'mc/mark-previous-like-this)

(defun get-random-uuid ()
  (interactive)
  (string-trim-right
   (with-temp-buffer
     (let ((buff (current-buffer)))
       (shell-command "uuidgen" buff)
       (buffer-string)))))

(defun insert-random-uuid ()
  (interactive)
  (insert (get-random-uuid)))

(global-set-key "\C-crr" 'rename-buffer)
(global-set-key "\C-cb" 'bury-buffer)
(global-set-key "\C-cg" 'magit-status)
(global-set-key (kbd "C-c u u") 'insert-random-uuid)
(global-set-key (kbd "C-c i") 'imenu)

;; JavaScript
(setq js-indent-level 2)

;; Allows calling narrow-to-region without confirmation
(put 'narrow-to-region 'disabled nil)

;; Don't prompt about closing buffers from emacsclient
(remove-hook 'kill-buffer-query-functions 'server-kill-buffer-query-function)


;; General editing bindings
(global-set-key (kbd "C-h") 'backward-delete-char-untabify)
(global-set-key (kbd "C-c h") 'enlarge-window-horizontally)
(global-set-key (kbd "C-c C-r") 'replace-string)

;; Scrolling. Someone on the internet suggested this might be less than
;; ideal. I dunno why. Whatever.
(setq scroll-step            1
      scroll-conservatively  10000)

(add-hook 'java-mode-hook (lambda ()
          (setq c-basic-offset 2)))

;; keep directories clean
(let ((auto-save-dir "~/.emacs.d/auto-save/"))
  (make-directory auto-save-dir t)
  (set-file-modes auto-save-dir 448) ;; 0700
  (setq auto-save-file-name-transforms
        `((".*" ,auto-save-dir t))))
(setq create-lockfiles nil)

;; keep the init.el clean
(setq custom-file (concat user-emacs-directory "/user/gfredericks-custom.el"))

;; suppress warnings for when automatically updating large generated
;; org buffers
(require 'warnings)
(add-to-list 'warning-suppress-types '(undo discard-info))

(setq base-dotfiles-dir
      ;; aren't computers great?
      (letrec ((this-file (shell-command-to-string (concat "realpath " load-file-name)))
               (user      (file-name-directory this-file))
               (emacs     (file-name-directory (substring user 0 -1)))
               (base      (file-name-directory (substring emacs 0 -1))))
        (substring base 0 -1)))

(defun bash-boilerplate
    () (interactive)
    (find-file (concat base-dotfiles-dir "/" "bash-boilerplate.sh")))

;; visual bell
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))


;; set the window divider to a pipe
(defun my-change-window-divider ()
  (let ((display-table (or buffer-display-table standard-display-table)))
    (set-display-table-slot display-table 5 ?â”ƒ)
    (set-window-display-table (selected-window) display-table)))

(add-hook 'window-configuration-change-hook 'my-change-window-divider)
