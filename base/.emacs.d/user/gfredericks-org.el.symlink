(provide 'gfredericks-org)

(require 'org-tempo)

(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-coj" 'org-clock-goto)
(global-set-key "\C-cotir" 'org-table-insert-row)
(global-set-key "\C-cotic" 'org-table-insert-column)
(global-set-key "\C-cotdr" 'org-table-kill-row)
(global-set-key "\C-cotdc" 'org-table-delete-column)
(global-set-key "\C-cc" 'org-capture)
(setq org-clock-into-drawer t)
(setq org-adapt-indentation t)

;; like org-end-of-subtree, but interactive
(defun gfredericks-org-end-of-subtree ()
  (interactive)
  (org-end-of-subtree)
  (beginning-of-line))

(defun org-custom ()
  "org-mode-hook"
  (org-defkey org-mode-map (kbd "RET") 'newline-and-indent)
  (org-defkey org-mode-map (kbd "C-c o e") 'org-insert-heading)
  (org-defkey org-mode-map (kbd "C-c o f") 'org-insert-subheading)
  (org-defkey org-mode-map (kbd "C-c o g") 'org-promote-subtree)
  (org-defkey org-mode-map (kbd "C-c o d") 'org-demote-subtree)
  (org-defkey org-mode-map (kbd "C-c o p") 'org-move-subtree-up)
  (org-defkey org-mode-map (kbd "C-c o n") 'org-move-subtree-down)
  (org-defkey org-mode-map (kbd "C-c o z") 'org-add-note)
  (org-defkey org-mode-map (kbd "C-c o o") 'my-org-open-subtree-in-web-browser)
  ;; custom implementations to support multi-digit priorities
  (org-defkey org-agenda-keymap (kbd "+") 'my-org-agenda-inc-priority)
  (org-defkey org-agenda-keymap (kbd "-") 'my-org-agenda-dec-priority)
  (org-defkey org-mode-map (kbd "C-c M->") 'gfredericks-org-end-of-subtree))
(add-hook 'org-mode-hook 'org-custom)

;; so the org agenda doesn't give me this weird 3/4 window
(setq org-agenda-window-setup nil)

(setq org-log-done 'note)


;; these get customized in my machine-local files
(defvar my-org-open-subtree-in-web-browser-local-file nil)
(defvar my-org-open-subtree-in-web-browser-url nil)

(defun my-org-open-subtree-in-web-browser ()
  (interactive)
  (let ((orig-oesteb org-export-show-temporary-export-buffer))
    (setq org-export-show-temporary-export-buffer nil)
    ;; I couldn't get the last arg of org-html-export-as-html to have
    ;; the effect of these setqs; not sure if it's supposed to be able
    ;; to do that
    (org-html-export-as-html nil t)
    (setq org-export-show-temporary-export-buffer orig-oesteb))

  (with-current-buffer "*Org HTML Export*"
    (write-file my-org-open-subtree-in-web-browser-local-file)
    (kill-buffer))
  (call-to-open-url-in-browser-from-remote
   my-org-open-subtree-in-web-browser-url))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; agenda/capture helpers

(defun my-get-point-of-next-thing ()
  (save-excursion
    (or (and (org-goto-first-child) (point))
        ;; org-get-next-sibling doesn't seem to do what its
        ;; documentation suggests; looks like it moves to the next
        ;; sibling OR the next heading of fewer stars, and always
        ;; returns nil; so doing this bookkeeping works the way we
        ;; need in this context
        (let ((p (point)))
          (org-get-next-sibling)
          (let ((p2 (point)))
            (if (= p p2) nil p2)))
        (org-end-of-subtree t))))

(defun skip-unless-empty-priority ()
  (if (< 0 (org-get-priority
            (thing-at-point 'line t)))
      (my-get-point-of-next-thing)
    nil))

(defun skip-if-empty-priority ()
  (if (< 0 (org-get-priority
            (thing-at-point 'line t)))
      nil
    (my-get-point-of-next-thing)))

(defun skip-if-done-or-has-skip-property-or-is-scheduled-in-the-past ()
  (or (org-agenda-skip-entry-if 'todo 'done)
      (if (or (org-entry-get (point) "AGENDA_HIDE")
              (and (eq nil (org-entry-get (point) "DEADLINE"))
                   (let ((s (org-entry-get (point) "SCHEDULED")))
                     (and s
                          (let ((my-t (org-time-string-to-time s)))
                            (time-less-p my-t (current-time)))))))
          (save-excursion (org-end-of-subtree t))
        nil)))

(defun seconds-to-date-string (seconds)
  "Returns \"YYYY-MM-DD DOW\"."
  (with-temp-buffer
    (org-insert-time-stamp (seconds-to-time seconds))
    (buffer-substring 2 16)))

(defun most-recent-monday* (seconds)
  (let ((s (seconds-to-date-string seconds)))
    (if (string= "Mon"
                 (substring s 11 14))
        s
      (most-recent-monday* (- seconds 72000)))))

(defun most-recent-monday ()
  (most-recent-monday* (time-to-seconds (current-time))))

(defun this-week-or-later? (time-string)
  "Checks if the time string represents something from this week or later."
  (not (string< (substring time-string 1 10)
                (substring (most-recent-monday) 1 10))))

(defun extract-local-date-string (s)
  ;; Assume it starts at char one or two
  (let ((c (string-to-char s)))
    (if (<= 48 c 57)
        (substring s 0 10)
      (substring s 1 11))))

(defun skip-unless-done-this-week ()
  "Skip entries that weren't finished this week."
  (let ((did-at (or (org-entry-get (point) "CLOSED")
                    (org-entry-get (point) "LAST_REPEAT"))))
    (if did-at
        (if (not (this-week-or-later? (extract-local-date-string did-at)))
            (save-excursion (org-end-of-subtree t))
          nil)
      (my-get-point-of-next-thing))))

(defvar gfredericks-org-priority-bounds (cons nil nil))

(defun sane-string-to-number
    (s)
  (let ((n (string-to-number s)))
    (if (string= (number-to-string n) s)
        n
      nil)))

(defun heading-to-priority
    (s)
  (let ((n (string-match "\\[#[0-9]+\\]" s)))
    (if n
        (string-to-number (substring s (+ n 2))))))

(defun skip-unless-nil-or-in-priority-bounds ()
  (letrec ((s (thing-at-point 'line t))
           (priority (heading-to-priority s))
           (b gfredericks-org-priority-bounds))
    (if (and priority
             (or (and (car b)
                      (< priority (car b)))
                 (and (cdr b)
                      (< (cdr b) priority))))
        (save-excursion (org-end-of-subtree t))
      nil)))

(defun skip-unless-in-priority-bounds ()
  (letrec ((s (thing-at-point 'line t))
           (priority (heading-to-priority s))
           (b gfredericks-org-priority-bounds))
    (if (or (not priority)
             (or (and (car b)
                      (< priority (car b)))
                 (and (cdr b)
                      (< (cdr b) priority))))
        (save-excursion (org-end-of-subtree t))
      nil)))

;; adapted from org-agenda-set-tags
(defun my-org-agenda-update-priority (delta)
  (interactive)
  (org-agenda-check-no-diary)
  (let* ((hdmarker (or (org-get-at-bol 'org-hd-marker)
			                 (org-agenda-error)))
	       (buffer (marker-buffer hdmarker))
	       (pos (marker-position hdmarker))
	       (inhibit-read-only t)
         (top-priority 0)
	       newhead)
    ;; this isn't used most of the time, can we avoid doing it?
    ;; just have to be able to switch back to the agenda buffer
    (save-excursion
      (beginning-of-buffer)
      (while (re-search-forward "\\[#\\([0-9]+\\)\\]" nil t)
        (let ((n (string-to-number (match-string 1))))
          (setq top-priority (max n top-priority)))))
    (org-with-remote-undo buffer
	    (with-current-buffer buffer
	      (widen)
	      (goto-char pos)
	      (org-show-context 'agenda)
        (letrec ((line (thing-at-point 'line t))
                 (priority (heading-to-priority line)))
          (if priority
              (progn
                (re-search-forward "\\[#\\([0-9]+\\)\\]" nil t)
                (backward-char)
                (org-delete-backward-char (length (match-string 1)))
                (insert (number-to-string (+ delta priority))))
            (progn
              (re-search-forward "\\*+ [A-Z]+ " nil t)
              (insert (format "[#%d] " top-priority)))))
	      (end-of-line 1)
	      (setq newhead (org-get-heading)))
	    (org-agenda-change-all-lines newhead hdmarker)
	    (beginning-of-line 1))))


(defun my-org-agenda-inc-priority
  () (interactive)
  (my-org-agenda-update-priority 1))

(defun my-org-agenda-dec-priority
  () (interactive)
  (my-org-agenda-update-priority -1))

(defun my-agenda-backlog-prefix-age ()
  (let ((created (org-entry-get (point) "TIMESTAMP_IA")))
    (if created
        (let* ((days-old
               (- (string-to-number
                   (format "%s" (org-time-stamp-to-now
                                 created)))))
               (weeks-old (/ days-old 7)))
          (if (< 2 weeks-old)
              (format "%2dw " weeks-old)
            "    "))
      "??? ")))

(defun my-agenda-active-is-recent ()
  (let ((scheduled (or (org-entry-get (point) "SCHEDULED")
                     (org-entry-get (point) "TIMESTAMP_IA"))))
    (if scheduled
        (let* ((days-old
               (- (string-to-number
                   (format "%s" (org-time-stamp-to-now
                                 scheduled))))))
          (if (< 7 days-old)
              "  "
            "* "))
      "  ")))

(defvar my-agenda-backlog-prefix-format
  "%7e %-14:c %(my-agenda-backlog-prefix-age)")

;; not using the * marker for recent things anymore
;; (defvar my-agenda-active-prefix-format
;;   "%7e %-14:c %(my-agenda-active-is-recent)")

(defvar my-agenda-active-prefix-format
  "%7e %-14:c")

(defun my-agenda-compare-by-priority
    (entry-a entry-b)
  (let ((pa (heading-to-priority entry-a))
        (pb (heading-to-priority entry-b)))
    ;; I think this makes sense
    (if pa
        (if pb
            (if (< pa pb)
                -1
              (if (> pa pb)
                  +1
                nil))
          -1)
      (if pb
          +1
        nil))))

(setq my-agenda-standard-sorting-strategy
      '(user-defined-down
        timestamp-up
        todo-state-up
        effort-up
        category-up
        alpha-up))

(defun my-agenda-section-active-todos
    (header &rest more-query)
  `(tags-todo
    ,(concat "SCHEDULED<\"<now>\"+DEADLINE<>{.+}+PRIORITY=\"B\"" (car more-query))
    ((org-agenda-skip-function 'skip-unless-nil-or-in-priority-bounds)
     (org-agenda-prefix-format ,my-agenda-active-prefix-format)
     (org-agenda-sorting-strategy ',my-agenda-standard-sorting-strategy)
     (org-agenda-overriding-header ,header)
     (org-agenda-dim-blocked-tasks 'invisible)
     (org-agenda-cmp-user-defined
      'my-agenda-compare-by-priority))))

(defun my-agenda-section-upcoming-deadlines
    (header)
  `(tags-todo
    "DEADLINE={.+}"
    ((org-agenda-skip-function 'skip-unless-nil-or-in-priority-bounds)
     (org-agenda-prefix-format ,my-agenda-active-prefix-format)
     (org-agenda-sorting-strategy ',my-agenda-standard-sorting-strategy)
     (org-agenda-overriding-header ,header)
     (org-agenda-dim-blocked-tasks 'invisible)
     ;; TODO: order by deadline?
     (org-agenda-cmp-user-defined
      'my-agenda-compare-by-priority))))

(defun my-agenda-section-frontlog
    (header min-priority)
  `(tags-todo
    "PRIORITY<>\"B\""
    ((org-agenda-skip-function 'skip-unless-nil-or-in-priority-bounds)
     (org-agenda-prefix-format ,my-agenda-active-prefix-format)
     (org-agenda-sorting-strategy ',my-agenda-standard-sorting-strategy)
     (org-agenda-overriding-header ,header)
     (org-agenda-dim-blocked-tasks 'invisible)
     (gfredericks-org-priority-bounds ',(cons min-priority nil))
     (org-agenda-cmp-user-defined 'my-agenda-compare-by-priority))))

(defun my-agenda-section-triage
    (header)
  `(tags-todo
    ,(concat "SCHEDULED<>{.+}+DEADLINE<>{.+}+PRIORITY=\"B\"") ;; B is the default when no priority is set
    ((org-agenda-skip-function 'skip-unless-nil-or-in-priority-bounds)
     (org-agenda-prefix-format ,my-agenda-active-prefix-format)
     (org-agenda-sorting-strategy ',my-agenda-standard-sorting-strategy)
     (org-agenda-overriding-header ,header)
     (org-agenda-dim-blocked-tasks 'invisible)
     (org-agenda-cmp-user-defined 'my-agenda-compare-by-priority))))

(defun my-agenda-section-backlog
    (header max-priority)
  ;; should things scheduled for next week show up somehow? sounds hard
  `(todo "TODO"
         ((org-agenda-skip-function 'skip-unless-in-priority-bounds)
          (org-agenda-sorting-strategy ',my-agenda-standard-sorting-strategy)
          (org-agenda-prefix-format ,my-agenda-backlog-prefix-format)
          (org-agenda-overriding-header ,header)
          (gfredericks-org-priority-bounds ',(cons nil max-priority))
          (org-agenda-cmp-user-defined 'my-agenda-compare-by-priority))))

(defun my-agenda-section-wholeweek
    (header)
  `(tags "wholeweek"
         ((org-agenda-prefix-format "%-7e %-14:c")
          (org-agenda-overriding-header ,header))))

(defun my-agenda-section-done
    (header)
  `(tags "/DONE|TODO"
         ((org-agenda-skip-function 'skip-unless-done-this-week)
          (org-agenda-sorting-strategy '(priority-down effort-up))
          (org-agenda-overriding-header ,header)
          (org-agenda-prefix-format "%6e %-14:c"))))

(defun my-agenda-section-calendar
    (header span)
  `(agenda ""
           ((org-agenda-prefix-format "%-7e %-14:c%?-12t% s")
            (org-agenda-skip-function 'skip-if-done-or-has-skip-property-or-is-scheduled-in-the-past)
            (org-agenda-span ,span)
            (org-agenda-overriding-header ,header))))

(defun my-agenda-capture-templates
    (capture-file scratch-file)
  `(("c" "capture file" entry
     (file+headline ,capture-file "Tasks")
     "* TODO %?\n  Created at %U\n  %i")
    ("s" "scratch file" entry
     (file+headline ,scratch-file "Tasks")
     "* TODO %?\n  Created at %U\n  %i")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Monkeypatching org-mode so the agenda export only exports
;; visible things
;;

;; this doesn't seem to work automatically (requires a manual eval);
;; maybe somehow this is getting loaded before the org-agenda code?
;; is there something I can "require"?
(require 'org-agenda)

(defun org-agenda-write (file &optional open nosettings agenda-bufname)
  "Write the current buffer (an agenda view) as a file.
Depending on the extension of the file name, plain text (.txt),
HTML (.html or .htm), PDF (.pdf) or Postscript (.ps) is produced.
If the extension is .ics, run icalendar export over all files used
to construct the agenda and limit the export to entries listed in the
agenda now.
If the extension is .org, collect all subtrees corresponding to the
agenda entries and add them in an .org file.
With prefix argument OPEN, open the new file immediately.
If NOSETTINGS is given, do not scope the settings of
`org-agenda-exporter-settings' into the export commands.  This is used when
the settings have already been scoped and we do not wish to overrule other,
higher priority settings.
If AGENDA-BUFFER-NAME, use this as the buffer name for the agenda to write."
  (interactive "FWrite agenda to file: \nP")
  (if (or (not (file-writable-p file))
	  (and (file-exists-p file)
	       (if (org-called-interactively-p 'any)
		   (not (y-or-n-p (format "Overwrite existing file %s? " file))))))
      (user-error "Cannot write agenda to file %s" file))
  (org-let (if nosettings nil org-agenda-exporter-settings)
    '(save-excursion
       (save-window-excursion
	 (let ((bs
          ;; this is the only part that's different
          ;;(copy-sequence (buffer-string))
          (progn (org-copy-visible (point-min) (point-max)) (current-kill 0))
         )
         beg content)
	   (with-temp-buffer
	     (rename-buffer org-agenda-write-buffer-name t)
	     (set-buffer-modified-p nil)
	     (insert bs)
	     (org-agenda-remove-marked-text 'org-filtered)
	     (run-hooks 'org-agenda-before-write-hook)
	     (cond
	      ((org-bound-and-true-p org-mobile-creating-agendas)
	       (org-mobile-write-agenda-for-mobile file))
	      ((string-match "\\.org\\'" file)
	       (let (content p m message-log-max)
		 (goto-char (point-min))
		 (while (setq p (next-single-property-change (point) 'org-hd-marker nil))
		   (goto-char p)
		   (setq m (get-text-property (point) 'org-hd-marker))
		   (when m
		     (push (save-excursion
			     (set-buffer (marker-buffer m))
			     (goto-char m)
			     (org-copy-subtree 1 nil t t)
			     org-subtree-clip)
			   content)))
		 (find-file file)
		 (erase-buffer)
		 (dolist (s content) (org-paste-subtree 1 s))
		 (write-file file)
		 (kill-buffer (current-buffer))
		 (message "Org file written to %s" file)))
	      ((string-match "\\.html?\\'" file)
	       (require 'htmlize)
	       (set-buffer (htmlize-buffer (current-buffer)))
	       (when org-agenda-export-html-style
		 ;; replace <style> section with org-agenda-export-html-style
		 (goto-char (point-min))
		 (kill-region (- (search-forward "<style") 6)
			      (search-forward "</style>"))
		 (insert org-agenda-export-html-style))
	       (write-file file)
	       (kill-buffer (current-buffer))
	       (message "HTML written to %s" file))
	      ((string-match "\\.ps\\'" file)
	       (require 'ps-print)
	       (ps-print-buffer-with-faces file)
	       (message "Postscript written to %s" file))
	      ((string-match "\\.pdf\\'" file)
	       (require 'ps-print)
	       (ps-print-buffer-with-faces
		(concat (file-name-sans-extension file) ".ps"))
	       (call-process "ps2pdf" nil nil nil
			     (expand-file-name
			      (concat (file-name-sans-extension file) ".ps"))
			     (expand-file-name file))
	       (delete-file (concat (file-name-sans-extension file) ".ps"))
	       (message "PDF written to %s" file))
	      ((string-match "\\.ics\\'" file)
	       (require 'ox-icalendar)
	       (org-icalendar-export-current-agenda (expand-file-name file)))
	      (t
	       (let ((bs (buffer-string)))
		 (find-file file)
		 (erase-buffer)
		 (insert bs)
		 (save-buffer 0)
		 (kill-buffer (current-buffer))
		 (message "Plain text written to %s" file))))))))
    (set-buffer (or agenda-bufname
		    (and (org-called-interactively-p 'any) (buffer-name))
		    org-agenda-buffer-name)))
  (when open (org-open-file file)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Using beamer with org-mode;
;; Pasted and modified from
;; http://emacs-fu.blogspot.com/2009/10/writing-presentations-with-org-mode-and.html
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
  '("beamer"
    "\\documentclass\[presentation\]\{beamer\}"

     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
     ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")

     ("\\begin{frame}[fragile]\\frametitle{%s}"
       "\\end{frame}"
       "\\begin{frame}[fragile]\\frametitle{%s}"
       "\\end{frame}")))
(require 'ox-beamer)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(add-to-list 'org-latex-packages-alist '("" "listings"))
(setq org-latex-minted-options
      '(("frame" "single")
        ("linenos" "")))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
            '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(defcustom gfredericks-autoexport-beamer nil
  "Exports org buffer to beamer files on save.")
(add-hook 'after-save-hook
          (lambda ()
            (if gfredericks-autoexport-beamer
                (org-beamer-export-to-latex)))
          t)

(defun start-exporting-html
  ()
  (interactive)
  (add-hook 'after-save-hook (lambda () (org-html-export-to-html)) t t))

;; I'm sure there's an easier way to do this but I don't know how to
;; pass an arg to org-time-stamp here
(defun insert-inactive-time-stamp ()
  (setq current-prefix-arg '(16))
  (call-interactively 'org-time-stamp t)
  (backward-delete-char 1)
  (insert "]")
  (backward-char 21)
  (backward-delete-char 1)
  (insert "[")
  (forward-char 21))

(defun inactive-timestamp ()
  ;; surely there's a more direct way to do this?
  (with-temp-buffer
    (insert-inactive-time-stamp)
    (beginning-of-line)
    (kill-line))
  (current-kill 0 t))

(defvar ubercapture-buffer "capture.org")
(defvar ubercapture-level 2)

(defun ubercapture
    (s props)
  (with-current-buffer ubercapture-buffer
    (save-excursion
      (goto-char (point-max))
      (if (not (= 10 (preceding-char)))
          (insert "\n"))
      (dotimes (_ ubercapture-level) (insert "*"))
      (insert " TODO " s)
      (insert "\n")
      (dotimes (_ ubercapture-level) (insert " "))
      (insert " Created at ")
      (insert-inactive-time-stamp)
      (insert "\n")
      (dolist (pair props)
        (org-set-property (car pair) (cdr pair)))
      (save-buffer))))

;; Monkeypatch so that multi-digit priorities are matched; only
;; the regex is changed at the moment
(defun org-agenda-fontify-priorities ()
  "Make highest priority lines bold, and lowest italic."
  (interactive)
  (mapc (lambda (o) (when (eq (overlay-get o 'org-type) 'org-priority)
		      (delete-overlay o)))
	(overlays-in (point-min) (point-max)))
  (save-excursion
    (let (b e p ov h l)
      (goto-char (point-min))
      (while (re-search-forward "\\[#\\(.+\\)\\]" nil t)
	(setq h (or (get-char-property (point) 'org-highest-priority)
		    org-highest-priority)
	      l (or (get-char-property (point) 'org-lowest-priority)
		    org-lowest-priority)
	      p (string-to-char (match-string 1))
	      b (match-beginning 0)
	      e (if (eq org-agenda-fontify-priorities 'cookies)
		    (match-end 0)
		  (point-at-eol))
	      ov (make-overlay b e))
	(overlay-put
	 ov 'face
	 (let ((special-face
		(cond ((org-face-from-face-or-color
			'priority 'org-priority
			(cdr (assoc p org-priority-faces))))
		      ((and (listp org-agenda-fontify-priorities)
			    (org-face-from-face-or-color
			     'priority 'org-priority
			     (cdr (assoc p org-agenda-fontify-priorities)))))
		      ((equal p l) 'italic)
		      ((equal p h) 'bold))))
	   (if special-face (list special-face 'org-priority) 'org-priority)))
	(overlay-put ov 'org-type 'org-priority)))))

;; where does this even come from? I have no idea
(org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))

(defun gfredericks-goto-agenda
    ()
  (interactive)
  (if (not (= 0 (alist-get 'uid (wg-current-workgroup))))
      (wg-switch-to-index-0))
  (delete-other-windows)
  (switch-to-buffer "agenda.org")
  (beginning-of-buffer))

(define-key org-mode-map "\C-c\C-a" nil)
(global-set-key "\C-c\C-a" 'gfredericks-goto-agenda)

(defun gfredericks-agenda-mode-refresh
    ()
  (interactive)
  (if gfredericks-agenda-mode-refresh-file
      (shell-command (format "touch %s" gfredericks-agenda-mode-refresh-file))
      (message "gfredericks-agenda-mode-refresh-file is not set")))

(defvar gfredericks-agenda-mode-refresh-file nil)

(defun gfredericks-agenda-mode-follow-link
    ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (org-next-link)
    (org-open-at-point)
    (org-reveal)))

(defun gfredericks-agenda-mode-org-todo
    ()
  (interactive)
  (let ((w (selected-window))
        (p (point))
        (b nil))
    (beginning-of-line)
    (org-next-link)
    (org-open-at-point)
    (org-todo)
    (save-buffer)
    (select-window w)
    ;; why does doing (goto-char p) right here not work???
    ;; (goto-char p)
    (org-save-all-org-buffers)
    (run-with-timer 1 nil (lambda (w p) (goto-char p)) w p)))

(defun gfredericks-agenda-mode-org-set-effort
    ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (org-next-link)
    (org-open-at-point)
    (org-set-effort)))

(defun gfredericks-agenda-switch-to
    ()
  (interactive)
  (let ((b nil)
        (p nil))
    (if (save-excursion
          (save-window-excursion
            (end-of-line)
            (backward-char)
            (org-in-regexp org-link-bracket-re)
            (org-link-open-from-string (match-string 0) t)
            (setq b (current-buffer))
            (setq p (point))))
        (progn
          (pop-to-buffer-same-window b)
          (goto-char p))
      (message "Nothing there"))))

(defun gfredericks-schedule-random-time
    ()
  (interactive)
  (org-schedule nil (format "+%dd" (+ 15 (mod (random) 30)))))

(defun gfredericks-agenda-mode-find-today
    ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward "^== TODAY")
  (setq current-prefix-arg 1)
  (call-interactively 'recenter-top-bottom))


(defun gfredericks-agenda-mode-find-calendar
    ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward "Total calendar time:")
  (setq current-prefix-arg 1)
  (call-interactively 'recenter-top-bottom)
  (re-search-forward "^ -->")
  (beginning-of-line))

(defun gfredericks-agenda-mode-find-backlog
    ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward "^. +backlog +.$")
  (beginning-of-line)
  (setq current-prefix-arg 1)
  (call-interactively 'recenter-top-bottom))

(defun gfredericks-agenda-mode-find-future
    ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward "   future   ")
  (setq current-prefix-arg 1)
  (call-interactively 'recenter-top-bottom))

(defun gfredericks-agenda-mode-find-past
    ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward "   past   ")
  (setq current-prefix-arg 1)
  (call-interactively 'recenter-top-bottom))

(defun gfredericks-agenda-mode-previous-section
    ()
  (interactive)
  (re-search-backward "^=="))

(defun gfredericks-agenda-mode-next-section
    ()
  (interactive)
  (re-search-forward "^==")
  (setq current-prefix-arg 1)
  (call-interactively 'recenter-top-bottom))

(define-minor-mode gfredericks-agenda-mode
  "okay"
  :init-value
  nil
  :lighter
  " gfragenda"
  :keymap
  (let ((km (make-sparse-keymap)))
    (define-key km
      (kbd "g") 'gfredericks-agenda-mode-refresh)
    (define-key km
      (kbd "TAB") 'gfredericks-agenda-mode-follow-link)
    (define-key km
      (kbd "C-c C-o") 'gfredericks-agenda-mode-follow-link)
    (define-key km
      (kbd "C-c C-t") 'gfredericks-agenda-mode-org-todo)
    (define-key km
      (kbd "C-x C-s") 'org-save-all-org-buffers)
    (define-key km
      (kbd "C-c C-x e") 'gfredericks-agenda-mode-org-set-effort)
    (define-key km
      (kbd "RET") 'gfredericks-agenda-switch-to)
    (define-key km
      (kbd "t") 'gfredericks-agenda-mode-find-today)
    (define-key km
      (kbd "c") 'gfredericks-agenda-mode-find-calendar)
    (define-key km
      (kbd "b") 'gfredericks-agenda-mode-find-backlog)
    (define-key km
      (kbd "f") 'gfredericks-agenda-mode-find-future)
    (define-key km
      (kbd "p") 'gfredericks-agenda-mode-find-past)
    (define-key km
      (kbd "C-c C-p") 'gfredericks-agenda-mode-previous-section)
    (define-key km
      (kbd "C-c C-n") 'gfredericks-agenda-mode-next-section)

    km)
  ;; doing this is fucking up auto-revert-mode because it thinks the buffer
  ;; has been modified
  ;; (ansi-color-apply-on-region (point-min) (point-max))
  (auto-revert-mode 1)
  (read-only-mode 1))

(defun custom-id ()
  (interactive)
  (if (org-entry-get (point) "CUSTOM_ID")
      (error "Already has CUSTOM_ID")
    (progn
      (org-set-property "CUSTOM_ID" (get-random-uuid))
      (call-interactively 'org-store-link))))

(defun backlog-section (section)
  (interactive "sSection: ")
  (org-set-property "BACKLOG_SECTION" section))

;; I don't like the default blank lines added by org-insert-item
(defun never-add-blank-lines-between-org-list-items
    (old-fn &rest args)
  0)
(advice-add 'org-list-separating-blank-lines-number :around
            'never-add-blank-lines-between-org-list-items)

(defun gfredericks-touch () (interactive)
  (org-set-property "UPDATED_AT" (inactive-timestamp)))

(defun gfredericks-schedule-today (time-range)
  (interactive "sTime range: ")
  (let ((date (substring (inactive-timestamp) 1 11)))
    (org-set-property "SCHEDULED_TODAY"
                      (format "<%s %s>" date time-range))))

(defun gfredericks-apply-ansi-colors ()
  (interactive)
  (message "applying ansi colors")
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))
    (not-modified)))

(defun gfredericks-agenda-mode-ansi-colors-setup ()
  (interactive)
  (gfredericks-apply-ansi-colors)
  (add-hook 'after-revert-hook 'gfredericks-apply-ansi-colors
            nil t))

(add-hook 'gfredericks-agenda-mode-hook
          'gfredericks-agenda-mode-ansi-colors-setup)

(defun followup-note
    ()
  (interactive)
  (org-add-log-setup
   'note
   nil
   nil
   nil
   "FOLLOWUP_NOTE: "))
