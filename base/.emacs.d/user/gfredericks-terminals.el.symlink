(provide 'gfredericks-terminals)

;; requiring this ensures that we're using workgroups
(require 'gfredericks-base)

;; this way spawned bash sessions have SHLVL=1
(setenv "SHLVL" "0")

(defun my-start-term (prefix-arg)
  (interactive "P")
  (if (= (prefix-numeric-value prefix-arg) 4)
      (let* ((buffer-name (format "terminal-tmp-%s" (abs (random)))))
        (progn
          (set-buffer (make-term buffer-name ;; "terminal"
                                 "/bin/bash"
                                 nil
                                 "-c"
                                 "export PROMPT_LABEL='!tmp!tmp!'; exec /bin/bash -i"))
          (term-mode)
          (term-char-mode)
          (switch-to-buffer (format "*%s*" buffer-name))))
    (let* ((buffer-name-base
            (-if-let (the-workgroup (wg-current-workgroup t))
                (wg-name the-workgroup)
              "default"))
           (done? nil)
           (idx 1))
      (while (not done?)
        (let ((buffer-name (if (= 1 idx)
                               (format "*terminal-%s*" buffer-name-base)
                             (format "*terminal-%s-%d*" buffer-name-base idx))))
          (-if-let (b (get-buffer buffer-name))
              (if (get-buffer-window b)
                  (setq idx (+ 1 idx))
                (progn
                  (setq done? t)
                  (switch-to-buffer b)))
            (progn
              (setq done? t)
              ;; if I want to customize any env variables or anything like that,
              ;; I don't think I can do it via term, but using the lower-level
              ;; make-term seems to work, e.g.:
              ;; (progn
              ;;   (set-buffer (make-term "terminal"
              ;;                          "/bin/bash"
              ;;                          nil
              ;;                          "-c"
              ;;                          "export FOO=bar; exec /bin/bash -i"))
              ;;   (term-mode)
              ;;   (term-char-mode)
              ;;   (switch-to-buffer "*terminal*"))
              (term "/bin/bash")
              (rename-buffer buffer-name))))))))

(defun switch-term-buffers-to-char-mode (&rest args)
  ;; this way I can generally assume a term buffer is in char mode
  ;; when I switch to it
  (when (string= "term-mode" major-mode)
    (term-char-mode)
    (goto-char (- (point-max) 1))))
(advice-add 'switch-to-buffer :after #'switch-term-buffers-to-char-mode)

;; Pasted from
;; http://stackoverflow.com/questions/14444265/kill-the-terminal-buffer-with-c-d
(defun term-handle-exit--close-buffer (&rest args)
  (when (null (get-buffer-process (current-buffer)))
    (use-local-map (let ((map (make-sparse-keymap)))
                     (define-key map (kbd "C-d")
                       (lambda ()
                         (interactive)
                         (kill-buffer (current-buffer))))
                     map))))
(advice-add 'term-handle-exit :after #'term-handle-exit--close-buffer)

(global-set-key "\C-cs" 'my-start-term)

(defun window-size-change-function-for-bug-32720 (_frame)
  (window--adjust-process-windows))

;; make workgroup commands work in the terminal buffers
(defun expose-global-binding-in-term (binding)
  (define-key term-raw-map binding
    (lookup-key (current-global-map) binding)))

(setq term-load-hook ())
(add-hook 'term-load-hook
  (lambda ()
    (expose-global-binding-in-term (kbd "C-c C-g"))
    (expose-global-binding-in-term (kbd "C-c s"))
    (expose-global-binding-in-term (kbd "C-c a"))
    (define-key term-raw-map (kbd "C-x") 'nil)

    ;; (add-hook 'window-size-change-functions
    ;;           'window-size-change-function-for-bug-32720)
    ))

(defun scratch
    ()
  (interactive)
  (if (not (= 1 (alist-get 'uid (wg-current-workgroup))))
      (wg-switch-to-index-1))
  (delete-other-windows)
  (setq current-prefix-arg 4)
  (call-interactively 'my-start-term))
