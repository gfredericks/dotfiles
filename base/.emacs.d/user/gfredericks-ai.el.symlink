(provide 'gfredericks-ai)

(require 'gfredericks-longrunning)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gptel

;; Thanks Bruce Hauman!

(gfredericks-packages-install 'gptel)

(require 'gptel)

(setq gptel-api-key (getenv "OPENAI_API_KEY"))

(gptel-make-anthropic "Claude"          ;Any name you want
  :stream t                             ;Streaming responses
  :key (getenv "ANTHROPIC_API_KEY"))

;; (gptel-make-gemini "Gemini"
;;   :key (getenv "GEMINI_API_KEY")
;;   :stream t)
(setq gptel-model "gpt-4o")

(with-eval-after-load 'gptel
  (gptel-make-tool
   :name "emacs-eval"
   :function (lambda (code)
               (condition-case err
                   (let ((result (eval (car (read-from-string code)))))
                     (format "%S" result))
                 (error (format "Error: %S" err))))
   :description "Evaluate Emacs Lisp code and return the result. Use this to execute Lisp expressions or query Emacs state."
   :args (list '(:name "code"
                       :type string
                       :description "Emacs Lisp code to evaluate. Must be a valid Lisp expression like (+ 1 2) or (buffer-list)"))
   :category "emacs")

  (gptel-make-tool
   :name "emacs-read-lines"
   :function (lambda (buffer-name start-line end-line)
               (condition-case err
                   (let ((lines '()))
                     (with-current-buffer buffer-name
                       (save-excursion
                         (goto-char (point-min))
                         (forward-line (1- start-line))
                         (while (and (<= start-line end-line) (not (eobp)))
                           (let ((line-content (buffer-substring-no-properties
                                                (line-beginning-position)
                                                (line-end-position))))
                             (push (format "%d: %s" start-line line-content) lines))
                           (forward-line 1)
                           (setq start-line (1+ start-line)))))
                     (mapconcat 'identity (nreverse lines) "\n"))
                 (error (format "Error: %S" err))))
   :description "Read lines from a specified buffer and prefix each line with its line number."
   :args (list '(:name "buffer-name"
                       :type string
                       :description "The name of the buffer to read from.")
               '(:name "start-line"
                       :type integer
                       :description "The starting line number (inclusive).")
               '(:name "end-line"
                       :type integer
                       :description "The ending line number (inclusive)."))
   :category "emacs")

  (gptel-make-tool
   :name "emacs-replace-lines"
   :function (lambda (buffer-name start-line end-line replacement-string)
               (message "Replacing lines %d to %d in buffer=%s"
                        start-line end-line buffer-name)
               (condition-case err
                   (with-current-buffer buffer-name
                     (save-excursion
                       ;; NOCOMMIT: I think this has an off-by-one error
                       ;; where it deletes too many lines; we might also
                       ;; want to support a pure insert, maybe just by
                       ;; changing end-line to be exclusive
                       (goto-char (point-min))
                       (forward-line (1- start-line))
                       (let ((start-point (line-beginning-position)))
                         (forward-line (1+ (- end-line start-line)))
                         (let ((end-point (line-end-position)))
                           (delete-region start-point end-point)
                           (goto-char start-point)
                           (insert replacement-string "\n")))))
                 (error (format "Error: %S" err))))
   :description "Replace a range of lines in a specified buffer with a provided string."
   :args (list '(:name "buffer-name"
                       :type string
                       :description "The name of the buffer to modify.")
               '(:name "start-line"
                       :type integer
                       :description "The starting line number to replace.")
               '(:name "end-line"
                       :type integer
                       :description "The ending line number to replace.")
               '(:name "replacement-string"
                       :type string
                       :description "The string to replace the specified lines."))
   :category "emacs")
  )
