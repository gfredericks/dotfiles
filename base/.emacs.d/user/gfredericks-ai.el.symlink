(provide 'gfredericks-ai)

(require 'gfredericks-longrunning)
(require 'gfredericks-packages)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; gptel

;; Thanks Bruce Hauman!

(gfredericks-packages-install 'gptel)

(require 'gptel)

(setq gptel-api-key (getenv "OPENAI_API_KEY"))

(gptel-make-anthropic "Claude"          ;Any name you want
  :stream t                             ;Streaming responses
  :key (getenv "ANTHROPIC_API_KEY"))

;; (gptel-make-gemini "Gemini"
;;   :key (getenv "GEMINI_API_KEY")
;;   :stream t)
(setq gptel-model 'gpt-4.1)

(defun gfredericks-gptel-mode-external-system-message ()
  (save-excursion
    (goto-char (point-min))
    (let ((system-file (org-entry-get nil "GPTEL_SYSTEM_FILE")))
      (when system-file
        (setq-local gptel--system-message
                    (with-temp-buffer
                      (insert-file-contents system-file)
                      (buffer-string)))))))

(add-hook 'gptel-mode-hook 'gfredericks-gptel-mode-external-system-message)

(add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
(add-hook 'gptel-post-response-functions 'gptel-end-of-response)

(defun gfredericks-assistant-get-agenda ()
  (with-current-buffer "agenda.org"
    (goto-char (point-min))
    ;; now go to the next occurrence of "Items"
    (search-forward "Items" nil t)
    (forward-line 2)
    (let ((start (point)))
      (search-forward " LATER ")
      (beginning-of-line)
      (let ((end (point)))
        (buffer-substring-no-properties start end)))))

(defun follow-only-matching-org-link (substring)
  "Searches the current buffer for lines containing the given SUBSTRING.
If there are zero or multiple such lines, signal an error. Otherwise,
follow the Org link on that line."
  (goto-char (point-min))
  (let (match-lines)
    (while (re-search-forward (regexp-quote substring) nil t)
      (push (line-number-at-pos (point)) match-lines))
    (setq match-lines (delete-dups match-lines))
    (cond
     ((= (length match-lines) 0)
      (user-error "No line contains substring: %s" substring))
     ((> (length match-lines) 1)
      (user-error "Multiple lines contain substring: %s" substring))
     (t
      (goto-char (point-min))
      (forward-line (1- (car match-lines)))
      (let ((line (thing-at-point 'line t)))
        (unless (string-match org-link-bracket-re line)
          (user-error "No org link on the matching line"))
        (let ((pos (string-match org-link-bracket-re line)))
          (goto-char (line-beginning-position))
          (forward-char pos)
          (org-open-at-point)))))))

(defun all-org-content-at-point ()
  (let ((start (point)))
    (org-next-visible-heading 1)
    (buffer-substring-no-properties start (point))))

(defun gfredericks-assistant-log-activity-update
    (activity-description)
  (save-window-excursion
    (save-excursion
      (find-file (concat (getenv "HOME") "/tmp/ai-activity-log.org"))
      (end-of-buffer)
      (if (not (eq (char-before) ?\n))
          (insert "\n"))
      (insert (format "- %s :: "
                      (format-time-string "[%Y-%m-%d %a %H:%M]")))
      (insert activity-description)
      (insert "\n")
      (save-buffer))))

(with-eval-after-load 'gptel
  (gptel-make-tool
   :name "emacs-eval"
   :function (lambda (code)
               (condition-case err
                   (let ((result (eval (car (read-from-string code)))))
                     (format "%S" result))
                 (error (format "Error: %S" err))))
   :description "Evaluate Emacs Lisp code and return the result. Use this to execute Lisp expressions or query Emacs state."
   :args (list '(:name "code"
                       :type string
                       :description "Emacs Lisp code to evaluate. Must be a valid Lisp expression like (+ 1 2) or (buffer-list)"))
   :confirm t
   :category "emacs")

  (gptel-make-tool
   :name "emacs-read-lines"
   :function (lambda (buffer-name start-line end-line)
               (message "AI tool reading buffer %s" buffer-name)
               (condition-case err
                   (let ((lines '()))
                     (with-current-buffer buffer-name
                       (save-excursion
                         (goto-char (point-min))
                         (forward-line (1- start-line))
                         (while (and (<= start-line end-line) (not (eobp)))
                           (let ((line-content (buffer-substring-no-properties
                                                (line-beginning-position)
                                                (line-end-position))))
                             (push (format "%d: %s" start-line line-content) lines))
                           (forward-line 1)
                           (setq start-line (1+ start-line)))))
                     (mapconcat 'identity (nreverse lines) "\n"))
                 (error (format "Error: %S" err))))
   :description "Read lines from a specified buffer and prefix each line with its line number."
   :args (list '(:name "buffer-name"
                       :type string
                       :description "The name of the buffer to read from.")
               '(:name "start-line"
                       :type integer
                       :description "The starting line number (inclusive).")
               '(:name "end-line"
                       :type integer
                       :description "The ending line number (inclusive)."))
   :category "emacs")

  (gptel-make-tool
   :name "emacs-replace-lines"
   :function (lambda (buffer-name start-line end-line replacement-string)
               (message "Replacing lines %d to %d in buffer=%s"
                        start-line end-line buffer-name)
               (condition-case err
                   (with-current-buffer buffer-name
                     (save-excursion
                       (goto-char (point-min))
                       (forward-line (1- start-line))
                       (let ((start-point (line-beginning-position)))
                         (forward-line (- end-line start-line))
                         (let ((end-point (line-end-position)))
                           (delete-region start-point end-point)
                           (goto-char start-point)
                           (insert replacement-string "\n")))))
                 (error (format "Error: %S" err))))
   :description "Replace a range of lines in a specified buffer with a provided string."
   :args (list '(:name "buffer-name"
                       :type string
                       :description "The name of the buffer to modify.")
               '(:name "start-line"
                       :type integer
                       :description "The starting line number to replace (inclusive).")
               '(:name "end-line"
                       :type integer
                       :description "The ending line number to replace (exclusive).")
               '(:name "replacement-string"
                       :type string
                       :description "The string to replace the specified lines."))
   :category "emacs")

  (gptel-make-tool
   :name "assistant-get-agenda"
   :function #'gfredericks-assistant-get-agenda
   :description "Returns the portion of the user's agenda representing active work to do."
   :args ()
   :category "org-assistant")

  (gptel-make-tool
   :name "assistant-get-agenda-details"
   :function (lambda (item-substring)
               (save-window-excursion
                 (save-excursion
                   (with-temp-buffer
                     (org-mode)
                     (insert (gfredericks-assistant-get-agenda))
                     (follow-only-matching-org-link item-substring)
                     (all-org-content-at-point)))))
   :description "Returns more detail about a single agenda item"
   :args (list '(:name "item-substring"
                       :type string
                       :description "A unique substring of an agenda item"))
   :category "org-assistant")
  (gptel-make-tool
   :name "assistant-log-activity-update"
   :function #'gfredericks-assistant-log-activity-update
   :description "Saves a timestamped record of user activity"
   :args (list '(:name "activity-description"
                       :type string
                       :description "A plain-english description of the activity (without timestamp)"))
   :category "org-assistant")

  (gptel-make-tool
   :name "assistant-set-notes"
   :function (lambda (item-substring notes)
               (save-window-excursion
                 (save-excursion
                   (with-temp-buffer
                     (org-mode)
                     (insert (gfredericks-assistant-get-agenda))
                     (follow-only-matching-org-link item-substring)
                     (org-set-property "AI_ASSISTANT_NOTES" notes))))
               (concat "Successfully added note: " notes))
   :description "Saves the given notes for the specific agenda item"
   :args (list '(:name "item-substring"
                       :type string
                       :description "A unique substring of an agenda item")
               '(:name "notes"
                       :type string
                       :description "Arbitrary notes"))
   :category "org-assistant")
  )
