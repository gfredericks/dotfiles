(provide 'gfredericks-clojure)

(require 'gfredericks-packages)

(gfredericks-packages-install 'clojure-mode)
(gfredericks-packages-install 'cider)
(gfredericks-packages-install 'align-cljlet)
(gfredericks-packages-install 'paredit)

(require 'clojure-mode)
(require 'cider)
(require 'align-cljlet)
(require 'paredit)


;; paredit bindings
(defun paredit-custom ()
  "paredit-mode-hook"
  (define-key paredit-mode-map (kbd "RET") 'newline-and-indent))
(add-hook 'paredit-mode-hook 'paredit-custom)


;; Tell cider not to require clojure.repl &c on startup
(setq nrepl-repl-requires-sexp "()")
(setq cider-repl-display-help-banner nil)

(setq cider-pprint-fn 'puget)
(setq cider-repl-use-pretty-printing t)

(setq cider-show-error-buffer 'except-in-repl)

;; Auto-eval on save
(defun reload-buffer-if-cider-running ()
  (interactive)
  (if (and (cider-connected-p)
           (string= "(ns " (buffer-substring-no-properties 1 5))
           (string-match "\\.clj$" (buffer-name)))
      (cider-load-buffer)))

(defun intellij-paredit-select-around ()
  (interactive)
  (paredit-backward-up)
  (paredit-forward)
  (set-mark-command nil)
  (paredit-backward))

(add-hook 'clojure-mode-hook
          (lambda () (paredit-mode +1)
                     (show-paren-mode +1)
                     (define-key clojure-mode-map (kbd "C-c C-a") 'align-cljlet)
                     (define-key clojure-mode-map (kbd "M-RET")   'indent-new-comment-line)
                     (define-key clojure-mode-map (kbd "C-M-w") 'intellij-paredit-select-around)))

;; like cider-eval-last-sexp, but always pretty-prints
(defun gfredericks-cider-eval-last-sexp (&optional output-to-current-buffer)
  "Evaluate the expression preceding point.
  If invoked with OUTPUT-TO-CURRENT-BUFFER, print the result in the current buffer."
  (interactive "P")
  (if output-to-current-buffer
      (if (= 16 (prefix-numeric-value output-to-current-buffer))
          (cider-pprint-eval-last-sexp-to-repl)
        (cider-pprint-eval-last-sexp-to-comment))
    (cider-eval-last-sexp)))

(setq cider-comment-prefix "#_=> ")
(setq cider-comment-continued-prefix "#_=> ")
(setq cider-comment-postfix "")

;; rebinding these two from C-c C-z since C-z is captured by my tmux
(add-hook 'cider-repl-mode-hook
          (lambda () (define-key cider-repl-mode-map (kbd "C-c C-y") 'cider-switch-to-last-clojure-buffer)))
(add-hook 'cider-mode-hook
          (lambda ()
            (define-key cider-mode-map (kbd "C-c C-y") 'cider-switch-to-repl-buffer)
            ;;         C-x C-e: evals to minibuffer, tmp display in buffer
            ;;     C-u C-x C-e: inserts commented & pprinted into buffer
            ;; C-u C-u C-x C-e: pprints to repl
            (define-key cider-mode-map (kbd "C-x C-e") 'gfredericks-cider-eval-last-sexp)))

(dolist (macro '(fresh conde run run* for-all for-map go go-loop
                 for> doseq> fn> defn> defprotocol> gen-for fnk
                 macrolet bg letfn> domonad checking))
  (put-clojure-indent macro 'defun))

(defun my-number->bigdec
    (num-s)
  (format
   "%sM"
   (replace-regexp-in-string
    "[,\\$]" ""
    (replace-regexp-in-string "âˆ’" "-" num-s))))

;; Convert the 12,345.67 under point to 12345.67M
(defun my-bigdecify ()
  (interactive)
  (let ((orig-point (point)))
    (if (or (= orig-point (line-end-position))
            (string= " " (buffer-substring orig-point (+ 1 orig-point))))
        (backward-char))
    (paredit-forward)
    (let ((end-point (point)))
      (paredit-backward)
      (letrec ((start-point (point))
               (s (buffer-substring start-point end-point)))
        (kill-region start-point end-point)
        (insert (my-number->bigdec s))
        (goto-char orig-point)))))

(global-set-key (kbd "C-c q") 'my-bigdecify)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; homegrown ob-clojure

(defconst clojure-print-value-template
  "(require 'clojure.java.io 'clojure.pprint)
   (def --devnull-- (java.io.PrintWriter. (clojure.java.io/writer \"/dev/null\")))

   (let [res
         ;; TODO: maybe replace these with streams that re-print
         ;; with a particular prefix? ugh I don't know how to do it
         ;; though without making a rather tedious impl of Writer,
         ;; which is maybe worth it
         (binding [] #_[*out* --devnull-- *err* --devnull--]
           (let [forms '(
                         %s
                         )
                 last-val (->> forms (map eval) last)]
             (with-open [sw (java.io.StringWriter.)]
               (clojure.pprint/pprint last-val sw)
               (.toString sw))))]
     (print res)
     (flush))")

(defun parse-deps-from-body
    (body)
  (if (string= "{:deps" (substring body 0 6))
      (letrec ((lines (split-string body "\n"))
               (not-blank? (lambda (s) (not (string= s ""))))
               (deps-lines (seq-take-while not-blank? lines))
               (body-lines (seq-drop-while not-blank? lines)))
        (cons (apply #'concat deps-lines)
              (apply #'concat body-lines)))
    (cons nil body)))

(defun org-babel-execute:clojure (body params)
  "Execute a block of Clojure code with Babel."
  (letrec ((deps+body (parse-deps-from-body body)))
    (letrec ((deps (car deps+body))
             (body (cdr deps+body))
             (result-type (alist-get :result-type params))
             (input (if (eq result-type 'output)
                        body
                      (if (eq result-type 'value)
                          (format clojure-print-value-template body)
                        (error "bad result-type for eval-clojure"))))
             (in-file (make-temp-file "org-babel-clojure-"))
             (out-file (make-temp-file "org-babel-clojure-")))
      (with-current-buffer (find-file in-file)
        (insert input)
        (let ((inhibit-message t))
          (save-buffer))
        (kill-buffer (current-buffer)))
      (call-process "clojure"
                    nil
                    `(:file ,out-file)
                    nil
                    "-Srepro"
                    "-Sdeps" (or deps "")
                    in-file)
      (delete-file in-file)
      (let ((ret (with-temp-buffer
                   (insert-file-contents out-file)
                   (buffer-string))))
        (delete-file out-file)
        ret))))
